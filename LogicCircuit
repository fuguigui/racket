#lang racket
(require scheme/mpair)
(define car mcar)
(define cdr mcdr)
(define list mlist)
(define set-car! set-mcar!)
(define set-cdr! set-mcdr!)
(define cons mcons)
;这个版本存在问题。。
;在add-to-agent
;队列的实现
(define (make-que) (cons '() '()))
(define (front-ptr queue) (car queue))
(define (rear-ptr queue)(cdr queue))
(define (set-front-ptr! queue item)(set-car! queue item))
(define (set-rear-ptr! queue item)(set-cdr! queue item))
(define (empty-que? queue)(null? (front-ptr queue)))
(define (front-que queue)
  (if (empty-que? queue)
      (error "FRON called with an empty queueT" queue)
      (car (front-ptr queue))))
(define (insert-que! queue item)
  (let ((new-pair (cons item '() )))
    (cond ((empty-que? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
(define (delete-que! queue)
  (cond((empty-que? queue)
        (error "DELETE! called with an empty queue" queue))
       (else(set-front-ptr! queue (cdr (front-ptr queue)))
            queue)))

;segment的基本定义
(define (make-time-segment time queue)(cons time queue))
(define (segment-time s) (car s))
(define (segment-que s)(cdr s))

;agenda的基本定义
(define (make-agenda) (list 0))
(define (current-time agenda)(car agenda))
(define (set-current-time! agenda time)
  (set-car! agenda time))
(define (segments agenda)(cdr agenda))
(define (set-segments! agenda segments)
  (set-cdr! agenda segments))
(define (first-segment a)(car (segments a)))
(define (rest-segments a)(cdr (segments a)))
(define (empty-agenda? agenda)
  (null? (segments agenda)))
(define (add-to-agenda! time action agenda)
  (define (belongs-before? segments)
    (or (null? segments)
       (< time (segment-time (car segments)))))
  (define (make-new-time-segment time action)
    (let ((q (make-que)))
          (insert-que! q action)
          (make-time-segment time q)))
  (define (add-to-segment! segments before)
      (cond((belongs-before? segments)
            (set-cdr! before (cons (make-new-time-segment time action) segments)))
           ((=(segment-time (car segments)) time)
            (insert-que! (segment-que (car segments)) action))
           (else
            (add-to-segment! (cdr segments) (car segments)))))
  ;  (cond ((null? segments)
   ;        (begin
    ;         (display "time:")(display time)(display "segments are null")(newline)
     ;        (set-cdr! agenda (cons (make-new-time-segment time action)'()))))
      ;    ((= (segment-time (car segments))time ) 
       ;    (begin(display "time:")(display time)(display "insert in the current segment")(newline)
        ;         (insert-que! (segment-que (car segments)) action)))
         ; (else
          ; (let ((rest (cdr segments)))
           ;  (if (belongs-before? rest)
            ;  (begin(display "time:")(display time)(display "in the before segments")(newline)
             ;       (set-cdr! segments (cons (make-new-time-segment time action)
              ;                         (cdr segments))))
              ;(add-to-segment! rest))))))
  (add-to-segment! (segments agenda) agenda))
(define (remove-first-agenda-item! agenda)
    (let ((q (segment-que (first-segment agenda))))
      (delete-que! q)
      (if (empty-que? q)
          (set-segments! agenda (rest-segments agenda))
          'ok-remove-first-agenda-item!)))
(define (first-agenda-item agenda)
    (if (empty-agenda? agenda)
        (error "Agenda is empty")
        (let ((first-seg (first-segment agenda)))
          (set-current-time! agenda (segment-time first-seg))
          (front-que (segment-que first-seg)))))
  
(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda)) action the-agenda))

(define the-agenda (make-agenda))

;一些操作
(define (propagate)
  (define (agenda-display the-agenda)
    (display "cur time: ")
    (display (car the-agenda))
    (newline)
    (define (loop-display-seg segs)
      (if (null? segs)
          'done
          (begin(display "the segment time:")
            (display (car (car segs)))
            (newline)
            (loop-display-seg (cdr segs)))))
    (loop-display-seg (cdr the-agenda)))
  (agenda-display the-agenda)
  (if(empty-agenda? the-agenda)
     'done-agenda-is-empty
     (let((first-item (first-agenda-item the-agenda)))
       (first-item)
       (remove-first-agenda-item! the-agenda)
       (propagate))))
(define (call-each procedures)
  (if (null? procedures)
      'done-of-all-each-process
      (begin
        ((car procedures))
        (call-each (cdr procedures)))))
(define (probe name wire)
  (add-action! wire
               (lambda ()
                 (newline)
                 (display name)
                 (display " ")
                 (display (current-time the-agenda))
                 (display "  new-value = ")
                 (display (get-signal wire))
                 (newline))))

;make-wire的闭包定义
(define (make-wire)
  (let ((signal-value 0)
        (action-procedures '()))
    (define (set-my-signal! new-value)
      (if(not (= signal-value new-value))
         (begin(set! signal-value new-value)
               (call-each action-procedures))
         'done-of-set-my-signal))
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal)signal-value)
           ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error "unkown operation -- wire" m))))
    dispatch))
;make-wire对外的接口定义
(define (get-signal wire)
  (wire 'get-signal))
(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
(define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))

;逻辑基本运算
(define (logical-not s)
  (cond ((= s 0) 1)
        ((= s 1) 0)
        (else (error "invalid signal" s))))
(define (logical-and a1 a2)
  (cond ((or (= a1 0)(= a2 0)) 0)
        ((and (= a1 1)(= a2 1)) 1)
        (else (error "invalid signal" a1 " " a2))))
(define (logical-or a1 a2)
  (cond ((or (= a1 1)(= a2 1))1)
        ((and (= a1 0)(= a2 0)) 0)
        (else (error "invalid signal" a1 " " a2))))

;逻辑门的定义
(define inverter-delay 1)
(define and-gate-delay 3)
(define or-gate-delay 5)

(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value (logical-and (get-signal a1)(get-signal a2))))
      (after-delay and-gate-delay
                   (lambda () (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok-and-gate)

(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ((new-value (logical-or (get-signal a1) (get-signal a2))))
      (after-delay or-gate-delay
                   (lambda () (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok-or-gate)

 (define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda () (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok-inverter)

;半加器
(define (half-adder a b s c)
  (let ((d (make-wire))
        (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok-half-adder))
;全加器
(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

;实验
(define a (make-wire))
(define b (make-wire))
(define s (make-wire))
(define c (make-wire))
(display "---step1")(newline)
(probe 's s)
(probe 'c c)
(display "---step2")(newline)
(half-adder a b s c)
(display "---step3")(newline)
(set-signal! a 1)
(display "---step4")(newline)
(propagate)
(probe 's s)
(probe 'c c)
(get-signal s)
(get-signal c)
(display "---step5")(newline)
(set-signal! b 1)
(display "---step6")(newline)
(propagate)
(display "---step7")(newline)
(get-signal s)
(get-signal c)
(display "---step8")(newline)
the-agenda
(display "---step9")(newline)
(define k (make-wire))
(display "---step10")(newline)
(probe 'k k)
