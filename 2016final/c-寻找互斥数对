#lang racket
;16-c 寻找互质数对
(define times (read))
(define (read-seq n)
  (if(= n 0)
     '()
     (cons (read)(read-seq (- n 1)))))
(define (make-pairs sequence)
  (cond ((null? sequence)(list '()))
        ((null? (cdr sequence))'())
        (else (append (map (lambda(x)(list (car sequence) x))
                           (cdr sequence))
                      (make-pairs (cdr sequence))))))
(define (gcd a b)
  (if (= a b) a
      (if(> (- b a) a)
         (gcd a (- b a))
         (gcd (- b a) a))))
(define (inter-prime? pair)
  (= (gcd (car pair) (cadr pair)) 1))
(define (filter pred seq)
  (cond ((null? seq)'())
        ((pred (car seq))
         (cons (car seq)
               (filter pred (cdr seq))))
        (else (filter pred (cdr seq)))))
(define (output-list seq)
  (if(null? seq)
     (newline)
     (begin
       (display (car seq))
       (display " ")
       (output-list (cdr seq)))))
(define (main)
  (define num(read))
  (define seq (read-seq num))
  (define pairs (make-pairs seq))
  (output-list(filter inter-prime? pairs)))
(define (main-loop n)
  (if ( = n 0)
      (void)
      (begin
        (main)
        (main-loop (- n 1)))))
(main-loop times)
