#lang racket
(require scheme/mpair)
(define list mlist)
(define set-car! set-mcar!)
(define set-cdr! set-mcdr!)
(define car mcar)
(define cdr mcdr)
(define cons mcons)
;对list的一些基本操作
;取出list的最后一个指针

;根据行数，列数读取构建迷宫
(define (build-maze r c)
  ;读入每一行迷宫,c代表需要读入的个数,返回值为一个list
  (define (read-line cc)
    (if ( = cc 0)
        '()
        (cons (read) 
              (read-line (- cc 1)))))
  ;读入整个迷宫,r代表行数
   (define (read-whole rr)
      (if ( = rr 0)
          '()
          (cons (read-line c)(read-whole (- rr 1)))))
  (read-whole r))
;根据当前地图，和r，c，k值寻找出路，返回出路大小
(define (find-path map r c k)
  ())
;构建迷宫，寻找出路
(define (maze)
  (begin
  ;读入三个参数
   (define r (read))
   (define c (read))
   (define k (read));存储整个迷宫
   (define the-maze (build-maze r c))
   (find-path the-maze r c k)))
;编写一个打印maze的函数，用于检查maze 的构造是否成功
(define (display-maze mm)
  (define (display-row r)
    (if(null? r)
       (newline)
       (begin(display (car r))
             (display " ")
             (display-row (cdr r)))))
  (if(null? mm)
     (newline)
     (begin
       (display-row (car mm))
       (newline)
       (display-maze (cdr mm)))))
;主函数
(define (main)
  (define N (read))
  (define (myloop n)
    (if (= n 0)
        void
        (begin(maze)
              (myloop (- n 1)))))
  (myloop N))
(main)
