#lang racket
;第四章解释器复习ch-04-03 amb解释器
;2017/6/15 07：00
;amb求值解释器
(require (except-in r5rs eval))

;-----------amb的scheme解释器
(define (analyze exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((variable? exp)(analyze-variable exp))
        ((quoted? exp)(analyze-quoted exp))
        ((assignment? exp)(analyze-assignment exp))
        ((definition? exp)(analyze-definition exp))
        ((if? exp)(analyze-if exp))
        ((lambda? exp)(analyze-lambda exp))
        ((begin? exp)(analyze-sequence (begin-actions exp)))
        ((cond? exp)(analyze (cond->if exp)))
        ((amb? exp)(analyze-amb exp))
        ((application? exp)(analyze-application exp))
        (else (error "Unkown expression type -- ANALYZE" exp))))

(define (self-evaluating? exp)
  (cond((number? exp) true)
       ((string? exp) true)
       (else false)))
(define (variable? exp)
  (symbol? exp))
(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (tagged-list? exp tag)
  (if(pair? exp)
     (eq? (car exp) tag)
     false))
(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (definition? exp)
  (tagged-list? exp 'define))
(define (if? exp)
  (tagged-list? exp 'if))
(define (lambda? exp)
  (tagged-list? exp 'lambda))
(define (begin? exp)
  (tagged-list? exp 'begin))
(define (cond? exp)
  (tagged-list? exp 'cond))
(define (amb? exp)
  (tagged-list? exp 'amb))
;-------*****注意application? 的写法
(define (application? exp)
  (pair? exp))


;****************框架和环境函数
(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame)(car frame))
(define (frame-values frame)(cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
(define (enclosing-environment env)(cdr env))
(define (first-frame env)(car env))
(define the-empty-environment '())
(define (extend-environment vars vals base-env)
  (if(= (length vars)(length vals))
     (cons (make-frame vars vals) base-env)
     (if(> (length vars)(length vals))
        (error "Too many VARS" vars vals)
        (error "Too many VALS" vars vals))))


;***************
(define (analyze-self-evaluating exp)
  (lambda(env succeed fail)
    (succeed exp fail)))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond((null? vars)(env-loop (enclosing-environment env)))
           ((eq? var (car vars))
            (car vals))
           (else (scan (cdr vars)(cdr vals)))))
     (if (eq? env the-empty-environment)
         (error "Unbound variable" var)
         (let((frame (first-frame env)))
           (scan (frame-variables frame)
                 (frame-values frame)))))
  (env-loop env))
(define (analyze-variable exp)
  (lambda(env succeed fail)
    (succeed (lookup-variable-value exp env) fail)))

(define (text-of-quotation exp)(cadr exp))
(define(analyze-quoted exp)
  (let((qval (text-of-quotation exp)))
    (lambda (env succeed fail)
      (succeed qval fail))))
(define (assignment-variable exp)(cadr exp))
(define (assignment-value exp)(caddr exp));???直接写(cddr exp)可不可以?
(define (analyze-assignment exp)
  (let((var (assignment-variable exp))
       (vproc (analyze (assignment-value exp))))
    (lambda (env)
      (set-variable-value! var (vproc env)env)
      'ok)))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond((null? vars)
            (env-loop (extend-environment env)))
           ((eq? var (car vars))
            (set-car! vals val))
           (else (scan (cdr vars)(cdr vals)))))
    (if(eq? env the-empty-environment)
       (error "Unbound variable -- SET!" var)
       (let((frame (first-frame env)))
         (scan (frame-variables frame)
               (frame-values frame)))))
    (env-loop env))
(define (definition-variable exp)
  (if(symbol? (cadr exp))
     (cadr exp)
     (caadr exp)));针对函数的定义
(define (definition-value exp)
  (if(symbol? (cadr exp))
     (caddr exp)
     (make-lambda (cdadr exp)
                  (cddr exp))));这里又不是caddr了。。。。?????
(define (make-lambda paras body)
  (cons 'lambda (cons paras body)))
(define (analyze-definition exp)
  (let((var (definition-variable exp))
       (vproc (analyze (definition-value exp))))
    (lambda (env succeed fail)
      (vproc env
             (lambda (val fail2)
               (define-variable! var val env)
               (succeed (void) fail2))
             fail))))
(define (define-variable! var val env)
  (let((frame (first-frame env)))
    (define (scan vars vals)
      (cond((null? vars)
            (add-binding-to-frame! var val frame))
           ((eq? var (car vars))
            (set-car! vals val))
           (else (scan (cdr vars)(cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))
(define (if-predicate exp)
  (cadr exp))
(define (if-consequent exp)
  (caddr exp))
(define (if-alternative exp)
  (if(not(null? (cdddr exp)))
     (cadddr exp)
     'false))
(define (analyze-if exp)
  (let((pproc (analyze (if-predicate exp)))
       (cproc (analyze (if-consequent exp)))
       (aproc (analyze (if-alternative exp))))
    (lambda (env succeed fail)
      (pproc env
             (lambda (pred-value fail2)
               (if (true? pred-value)
                   (cproc env succeed fail2)
                   (aproc env succeed fail2)))
             fail))))
(define (true? exp)
  (not(equal? exp false)))

(define (analyze-lambda exp)
  (let((vars (lambda-parameters exp))
       (bproc (analyze-sequence (lambda-body exp))))
    (lambda(env succeed fail)
      (succeed (make-procedure vars bproc env)
               fail))))
(define (make-procedure paras body env)
  (list 'procedure paras body env))
(define (lambda-parameters exp)(cadr exp))
(define (lambda-body exp)(cddr exp))

(define (last-exp? seq)(null? (cdr seq)))
(define (first-exp seq)(car seq))
(define (rest-exps seq)(cdr seq))

(define(analyze-sequence exps)
  (define (sequentially proc1 proc2)
    (lambda (env succeed fail)
      (proc1 env
             (lambda (proc1-value fail2)
               (proc2 env succeed fail2))
             fail)))
  (define (loop first-proc rest-procs)
    (if(null? rest-procs)
       first-proc
       (loop (sequentially first-proc (car rest-procs))
             (cdr rest-procs))))
  (let((procs (map analyze exps)))
    (if(null? procs)
       (error "Empty sequence -- ANALYZE SEQUENCE")
       (loop (car procs)(cdr procs)))))

(define (begin-actions exp)(cdr exp))


(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
      false
      (let((first (car clauses))
           (rest (cdr clauses)))
        (if(cond-else-clause? first)
           (if(null? rest)
              (sequence->exp (cond-actions first))
              (error "ELSE clause isn't last -- COND->IF" clauses))
           (make-if (cond-predicate first)
                    (sequence->exp (cond-actions first))
                    (expand-clauses rest))))))
(define (make-if pred cons alter)
  (list 'if pred cons alter))
(define (cond-else-clause? clause)
  (tagged-list? clause 'else))
(define (cond-predicate clause)(car clause))
(define (cond-actions clause)(cdr clause))
(define (cond-clauses exp)(cdr exp))
(define (sequence->exp seq)
  (cond ((null? seq)seq)
        ((last-exp? seq)(first-exp seq))
        (else (make-begin seq))))
(define (make-begin exp)
  (cons 'begin exp))

(define (analyze-application exp)
  (let((fproc (analyze (operator exp)))
       (aprocs (map analyze (operands exp))))
    (lambda (env succeed fail)
      (fproc env
             (lambda(f-value fail2)
               (get-args aprocs env
                         (lambda (a-value fail3)
                           (execute-application f-value a-value succeed fail3)
                           fail2)))
             fail))))
(define (get-args procs env succeed fail)
  (if (null? procs)
      (succeed '() fail)
      ((car procs) env
                    (lambda (arg fail2)
                      (get-args (cdr procs)
                                env
                                (lambda (args fail3)
                                  (succeed (cons arg args)
                                           fail3))
                                fail2))
                    fail)))
(define (execute-application proc args succeed fail)
  (cond ((primitive-procedure? proc)
         (succeed
          (apply-primitive-procedure proc args)
          fail))
        ((compound-procedure? proc)
         ((procedure-body proc)
          (extend-environment
           (procedure-parameters proc)
           args
           (procedure-environment proc))
          succeed
          fail))
        (else(error "Unknown procedure type -- EXECUTE-APPLICATION" proc))))
(define (operator co-exp)(car co-exp))
(define (operands co-exp)(cdr co-exp))
(define (list-of-values operands env)
  (map (lambda (x)
         (lookup-variable-value x env))
       operands))

(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (compound-procedure? proc)
  (tagged-list? proc 'procedure))
(define(procedure-parameters p)(cadr p))
(define (procedure-body p)(caddr p))
(define (procedure-environment p)(cadddr p))

(define (analyze-amb exp)
  (let((cprocs (map analyze (amb-choices exp))))
    (lambda (env succeed fail)
      (define (try-next choices)
        (if(null? choices)
           (fail)
           ((car choices) env
                          succeed
                          (lambda()
                            (try-next (cdr choices))))))
      (try-next cprocs))))
(define (amb-choices amb-exp)
  (cdr amb-exp))
(define (ambeval exp env succeed fail)
  ((analyze exp) env succeed fail))

(define rq '(define (require p)
              (if (not p) (amb) (void))))
(define glb-succeed
  (lambda (val next)
    (display val)(newline)))
(define glb-fail
  (lambda()
    (display "glb-failed")(newline)))

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list 'remainder remainder)))
(define (primitive-procedure-names)
  (map car primitive-procedures))
(define (apply-primitive-procedure proc args)
  ((primitive-implementation proc) args))
(define (primitive-implementation proc)(cadr proc))
(define (primitive-procedure-objects)
  (map (lambda (proc)(list 'primitive (cadr proc)))
       primitive-procedures))


;--------------初始化环境
(define (setup-environment)
  (let((initial-env
        (extend-environment (primitive-procedure-names)
                            (primitive-procedure-objects)
                            the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
(define glb-env (setup-environment))
(ambeval rq glb-env glb-succeed glb-fail)


;用求值器处理键盘输入的scheme程序
(define input-prompt ";;;M_Eval input:")
(define output-prompt ";;;M_Eval output")



(define (driver-loop)
  ;(prompt-for-input input-prompt)
  (let((input (read)))
    (let((output (ambeval input glb-env glb-succeed glb-fail)))
   ;   (announce-output output-prompt)
      (user-print output)
      (driver-loop))))
(define (prompt-for-input string)
  (newline) (newline)(display string) (newline))
(define (announce-output string)
  (newline) (display string)(newline))


(define (user-print object)
  (if(compound-procedure? object)
  ;   (display (list 'compound-procedure
   ;                 (procedure-parameters object)
    ;                (procedure-body object)
     ;               '<procedure-env>))
     (display object)))
;(driver-loop)


;测试
(ambeval '(amb 1 2 3 4) glb-env glb-succeed glb-fail)
