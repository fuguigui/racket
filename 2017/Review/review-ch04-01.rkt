#lang racket
;第四章解释器复习
;2017/6/14 19:18
(require (except-in r5rs eval))

;-----------简易的scheme解释器
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp)(lookup-variable-value exp env))
        ((quoted? exp)(text-of-quotation exp))
        ((assignment? exp)(eval-assignment exp env))
        ((definition? exp)(eval-definition exp env))
        ((if? exp)(eval-if exp env))
        ((lambda? exp)(make-procedure (lambda-parameters exp)
                                      (lambda-body exp)
                                      env))
        ((begin? exp)(eval-sequence (begin-actions exp)env))
        ((cond? exp)(eval (cond->if exp) env))
        ((application? exp)(my-apply (eval (operator exp) env)
                                     (list-of-values (operands exp) env)))
        (else (error "Unkown expression type -- EVAL" exp))))

(define (self-evaluating? exp)
  (cond((number? exp) true)
       ((string? exp) true)
       (else false)))
(define (variable? exp)
  (symbol? exp))
(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (tagged-list? exp tag)
  (if(pair? exp)
     (eq? (car exp) tag)
     false))
(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (definition? exp)
  (tagged-list? exp 'define))
(define (if? exp)
  (tagged-list? exp 'if))
(define (lambda? exp)
  (tagged-list? exp 'lambda))
(define (begin? exp)
  (tagged-list? exp 'begin))
(define (cond? exp)
  (tagged-list? exp 'cond))
;-------*****注意application? 的写法
(define (application? exp)
  (pair? exp))


;****************框架和环境函数
(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame)(car frame))
(define (frame-values frame)(cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
(define (enclosing-environment env)(cdr env))
(define (first-frame env)(car env))
(define the-empty-environment '())
(define (extend-environment vars vals base-env)
  (if(= (length vars)(length vals))
     (cons (make-frame vars vals) base-env)
     (if(> (length vars)(length vals))
        (error "Too many VARS" vars vals)
        (error "Too many VALS" vars vals))))


;***************
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond((null? vars)(env-loop (enclosing-environment env)))
           ((eq? var (car vars))
            (car vals))
           (else (scan (cdr vars)(cdr vals)))))
     (if (eq? env the-empty-environment)
         (error "Unbound variable" var)
         (let((frame (first-frame env)))
           (scan (frame-variables frame)
                 (frame-values frame)))))
  (env-loop env))

(define (text-of-quotation exp)(cadr exp));??????为什么不是(cdr exp)
(define (assignment-variable exp)(cadr exp))
(define (assignment-value exp)(caddr exp));???直接写(cddr exp)可不可以？
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env)
  'ok)
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond((null? vars)
            (env-loop (extend-environment env)))
           ((eq? var (car vars))
            (set-car! vals val))
           (else (scan (cdr vars)(cdr vals)))))
    (if(eq? env the-empty-environment)
       (error "Unbound variable -- SET!" var)
       (let((frame (first-frame env)))
         (scan (frame-variables frame)
               (frame-values frame)))))
    (env-loop env))
(define (definition-variable exp)
  (if(symbol? (cadr exp))
     (cadr exp)
     (caadr exp)));针对函数的定义
(define (definition-value exp)
  (if(symbol? (cadr exp))
     (caddr exp)
     (make-lambda (cdadr exp)
                  (cddr exp))));这里又不是caddr了。。。。?????
(define (make-lambda paras body)
  (cons 'lambda (cons paras body)))
(define (eval-definition exp env)
  (define-variable!
    (definition-variable exp)
    (eval (definition-value exp)env)
    env)
  'ok)
(define (define-variable! var val env)
  (let((frame (first-frame env)))
    (define (scan vars vals)
      (cond((null? vars)
            (add-binding-to-frame! var val frame))
           ((eq? var (car vars))
            (set-car! vals val))
           (else (scan (cdr vars)(cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))
(define (if-predicate exp)
  (cadr exp))
(define (if-consequent exp)
  (caddr exp))
(define (if-alternative exp)
  (if(not(null? (cdddr exp)))
     (cadddr exp)
     'false))
(define (eval-if exp env)
  (if(true? (eval (if-predicate exp) env))
     (eval (if-consequent exp) env)
     (eval (if-alternative exp) env)))
(define (true? exp)
  (not(equal? exp false)))
(define (make-procedure paras body env)
  (list 'procedure paras body env))
(define (lambda-parameters exp)(cadr exp))
(define (lambda-body exp)(cddr exp))

(define (last-exp? seq)(null? (cdr seq)))
(define (first-exp seq)(car seq))
(define (rest-exps seq)(cdr seq))
(define (eval-sequence exps env)
  (if(last-exp? exps)
     (eval (first-exp exps) env)
     ((eval (first-exp exps) env)
      (eval-sequence (rest-exps exps) env))))
(define (begin-actions exp)(cdr exp))


(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
      false
      (let((first (car clauses))
           (rest (cdr clauses)))
        (if(cond-else-clause? first)
           (if(null? rest)
              (sequence->exp (cond-actions first))
              (error "ELSE clause isn't last -- COND->IF" clauses))
           (make-if (cond-predicate first)
                    (sequence->exp (cond-actions first))
                    (expand-clauses rest))))))
(define (make-if pred cons alter)
  (list 'if pred cons alter))
(define (cond-else-clause? clause)
  (tagged-list? clause 'else))
(define (cond-predicate clause)(car clause))
(define (cond-actions clause)(cdr clause))
(define (cond-clauses exp)(cdr exp))
(define (sequence->exp seq)
  (cond ((null? seq)seq)
        ((last-exp? seq)(first-exp seq))
        (else (make-begin seq))))
(define (make-begin exp)
  (cons 'begin exp))


(define (my-apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply (primitive-implementation procedure)
                arguments))
        ((compound-procedure? procedure);'(procedure (x y)(* x y)env)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           arguments
           (procedure-environment procedure))))
        (else
         (error "Unknown exp type -- APPLY " procedure))))
(define (operator co-exp)(car co-exp))
(define (operands co-exp)(cdr co-exp))
(define (list-of-values operands env)
  (map (lambda (x)
         (lookup-variable-value x env))
       operands))

(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (compound-procedure? proc)
  (tagged-list? proc 'procedure))
(define(procedure-parameters p)(cadr p))
(define (procedure-body p)(caddr p))
(define (procedure-environment p)(cadddr p))

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list 'remainder remainder)))
(define (primitive-procedure-names)
  (map car primitive-procedures))
(define (primitive-implementation proc)(cadr proc))
(define (primitive-procedure-objects)
  (map (lambda (proc)(list 'primitive (cadr proc)))
       primitive-procedures))


;--------------初始化环境
(define (setup-environment)
  (let((initial-env
        (extend-environment (primitive-procedure-names)
                            (primitive-procedure-objects)
                            the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
(define glb-env (setup-environment))
(display glb-env)



;用求值器处理键盘输入的scheme程序
(define input-prompt ";;;M_Eval input:")
(define output-prompt ";;;M_Eval output")
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let((input (read)))
    (let((output (eval input glb-env)))
      (announce-output output-prompt)
      (user-print output)
      (driver-loop))))
(define (prompt-for-input string)
  (newline) (newline)(display string) (newline))
(define (announce-output string)
  (newline) (display string)(newline))
(define (user-print object)
  (if(compound-procedure? object)
     (display (list 'compound-procedure
                    (procedure-parameters object)
                    (procedure-body object)
                    '<procedure-env>))
     (display object)))
(driver-loop)


;测试部分
(eval '(define test1 (lambda (x y) (+ x y))) glb-env)
(display glb-env)