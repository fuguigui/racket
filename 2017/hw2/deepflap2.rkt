#lang racket
(define (deepflap lst)
  (cond ((null? lst)lst)
        ((pair? lst)
         (append (deepflap (cdr lst))
                 (cons (deepflap (car lst))'())))
        (else lst)))
(define (main)
  (define p (read))
  (if (eq? p eof)
      (void)
      (begin
        (display (deepflap p))
        (newline)
        (main)
        (void))))
(main)
;(define p (read))
;(display (deepflap p))
;(1 2 3 (4 5)(6 (7 (8)) ) )
;(1 2 3)
;(1 (2 3))
;((1 2) (3 4) 5)
;(2 ((3 9) ((4 5) (6 7))))