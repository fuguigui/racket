#lang racket
;第四章解释器复习
;2017/6/15 10:24
;分析和执行分离，添加了let，and和or
(require (except-in r5rs eval))

;-----------简易的scheme解释器
(define (eval exp env)
  ((analyze exp) env))
(define (analyze exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((variable? exp)(analyze-variable exp))
        ((quoted? exp)(analyze-quoted exp))
        ((assignment? exp)(analyze-assignment exp))
        ((definition? exp)(analyze-definition exp))
        ((if? exp)(analyze-if exp))
        ((lambda? exp)(analyze-lambda exp))
        ((begin? exp)(analyze-sequence (begin-actions exp)))
        ((cond? exp)(analyze (cond->if exp)))
  ;       ((cond? exp)(display "in cond")
   ;                  (analyze (cond->if exp)))
        ((let? exp)(analyze (let->application exp)))
        ((and? exp)(analyze-and exp))
        ((or? exp)(analyze-or exp))
        ((application? exp)(analyze-application exp))
        (else (error "Unkown expression type -- ANALYZE" exp))))


;--------补充部分---------
(define (and? exp)
  (tagged-list? exp 'and))
(define (or? exp)
  (tagged-list? exp 'or))
(define (let? exp)
  (tagged-list? exp 'let))
;-------------结束------------
(define (self-evaluating? exp)
  (cond((number? exp) true)
       ((string? exp) true)
       (else false)))
(define (variable? exp)
  (symbol? exp))
(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (tagged-list? exp tag)
  (if(pair? exp)
     (eq? (car exp) tag)
     false))
(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (definition? exp)
  (tagged-list? exp 'define))
(define (if? exp)
  (tagged-list? exp 'if))
(define (lambda? exp)
  (tagged-list? exp 'lambda))
(define (begin? exp)
  (tagged-list? exp 'begin))
(define (cond? exp)
  (tagged-list? exp 'cond))
;-------*****注意application? 的写法
(define (application? exp)
  (pair? exp))


;****************框架和环境函数
(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame)(car frame))
(define (frame-values frame)(cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
(define (enclosing-environment env)(cdr env))
(define (first-frame env)(car env))
(define the-empty-environment '())
(define (extend-environment vars vals base-env)
  (if(= (length vars)(length vals))
     (cons (make-frame vars vals) base-env)
     (if(> (length vars)(length vals))
        (error "Too many VARS" vars vals)
        (error "Too many VALS" vars vals))))


;***************
(define (analyze-self-evaluating exp)
  (lambda(env)exp))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond((null? vars)(env-loop (enclosing-environment env)))
           ((eq? var (car vars))
            (car vals))
           (else (scan (cdr vars)(cdr vals)))))
     (if (eq? env the-empty-environment)
         (error "Unbound variable" var)
         (let((frame (first-frame env)))
           (scan (frame-variables frame)
                 (frame-values frame)))))
  (env-loop env))
(define (analyze-variable exp)
  (lambda(env)(lookup-variable-value exp env)))

(define (text-of-quotation exp)(cadr exp))
(define(analyze-quoted exp)
  (let((qval (text-of-quotation exp)))
    (lambda (env) qval)))
(define (assignment-variable exp)(cadr exp))
(define (assignment-value exp)(caddr exp))
(define (analyze-assignment exp)
  (let((var (assignment-variable exp))
       (vproc (analyze (assignment-value exp))))
    (lambda (env)
      (set-variable-value! var (vproc env)env))))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond((null? vars)
            (env-loop (extend-environment env)))
           ((eq? var (car vars))
            (set-car! vals val))
           (else (scan (cdr vars)(cdr vals)))))
    (if(eq? env the-empty-environment)
       (error "Unbound variable -- SET!" var)
       (let((frame (first-frame env)))
         (scan (frame-variables frame)
               (frame-values frame)))))
    (env-loop env))
(define (definition-variable exp)
  (if(symbol? (cadr exp))
     (cadr exp)
     (caadr exp)))
(define (definition-value exp)
  (if(symbol? (cadr exp))
     (caddr exp)
     (make-lambda (cdadr exp)
                  (cddr exp))));这里又不是caddr了。。。。?????
(define (make-lambda paras body)
  (cons 'lambda (cons paras body)))
(define (analyze-definition exp)
  (let((var (definition-variable exp))
       (vproc (analyze (definition-value exp))))
    (lambda (env)
      (define-variable! var (vproc env) env))))
(define (define-variable! var val env)
  (let((frame (first-frame env)))
    (define (scan vars vals)
      (cond((null? vars)
            (add-binding-to-frame! var val frame))
           ((eq? var (car vars))
            (set-car! vals val))
           (else (scan (cdr vars)(cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))
(define (if-predicate exp)
  (cadr exp))
(define (if-consequent exp)
  (caddr exp))
(define (if-alternative exp)
  (if(not(null? (cdddr exp)))
     (cadddr exp)
     'false))
;改写为支持没有结果及分支变量的if
(define (analyze-if exp)
  (define (if-one pproc)
    (lambda(env)(pproc env)))
  (define (if-two pproc cproc)
    (lambda(env)
      (if(true? (pproc env))
         (cproc env)
         false)))
  (define (if-three pproc cproc aproc)
    (lambda (env)
      (if(true? (pproc env))
         (cproc env)
         (aproc env))))
  (let((raw-pproc (if-predicate exp))
       (raw-cproc (if-consequent exp))
       (raw-aproc (if-alternative exp)))
    (cond((null? raw-cproc)(if-one (analyze raw-pproc)))
         ((null? raw-aproc)(if-two (analyze raw-pproc)(analyze raw-cproc)))
         (else(if-three(analyze raw-pproc)
                       (analyze raw-cproc)
                       (analyze raw-aproc))))))
(define (true? exp)
  (not(equal? exp false)))

(define(get-and-or-exps exp)
;  (display (cdr exp))
 ; (newline)
  (cdr exp))
(define (analyze-and exp)
  (define (and-loop exps env)
      (cond((null? (cdr exps)) (eval (car exps) env))
           ((false? (eval (car exps) env)) false)
           (else (and-loop (cdr exps) env))))
  (lambda (env)
  (and-loop (get-and-or-exps exp) env)))
(define (analyze-or exp)
  (define(or-loop exps)
    (cond ((null? exps) false)
          ((true? (car exps)) true)
          (else (or-loop exps))))
  (or-loop (get-and-or-exps exp)))
  
(define (analyze-lambda exp)
  (let((vars (lambda-parameters exp))
       (bproc (analyze-sequence (lambda-body exp))))
    (lambda(env)(make-procedure vars bproc env))))
(define (make-procedure paras body env)
  (list 'procedure paras body env))
(define (lambda-parameters exp)(cadr exp))
(define (lambda-body exp)(cddr exp))

(define (last-exp? seq)(null? (cdr seq)))
(define (first-exp seq)(car seq))
(define (rest-exps seq)(cdr seq))

(define(analyze-sequence exps)
  (define (sequentially proc1 proc2)
    (lambda (env) (proc1 env)(proc2 env)))
  (define (loop first-proc rest-procs)
    (if(null? rest-procs)
       first-proc
       (loop (sequentially first-proc (car rest-procs))
             (cdr rest-procs))))
  (let((procs (map analyze exps)))
    (if(null? procs)
       (error "Empty sequence -- ANALYZE SEQUENCE")
       (loop (car procs)(cdr procs)))))

(define (begin-actions exp)(cdr exp))

;改为支持没有else语句及cond-action的cond
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
      '()
      (let((first (car clauses))
           (rest (cdr clauses)))
        (if(cond-else-clause? first)
           (if(null? rest)
              (sequence->exp (cond-actions first))
              (error "ELSE clause isn't last -- COND->IF" clauses))
           (make-if (cond-predicate first)
                    (sequence->exp (cond-actions first))
                    (expand-clauses rest))))))
(define (make-if pred cons alter)
  (list 'if pred cons alter))
(define (cond-else-clause? clause)
  (tagged-list? clause 'else))
(define (cond-predicate clause)(car clause))
(define (cond-actions clause)(cdr clause))
(define (cond-clauses exp)(cdr exp))
(define (sequence->exp seq)
  (cond ((null? seq)seq)
        ((last-exp? seq)(first-exp seq))
        (else (make-begin seq))))
(define (make-begin exp)
  (cons 'begin exp))

(define (analyze-application exp)
  (let((fproc (analyze (operator exp)))
       (aprocs (map analyze (operands exp))))
    (lambda (env)
      (execute-application(fproc env)
                          (map (lambda (aproc)(aproc env))
                               aprocs)))))
(define (execute-application proc args)
  (cond ((primitive-procedure? proc)
         (apply (primitive-implementation proc) args))
        ((compound-procedure? proc)
         ((procedure-body proc)
          (extend-environment
           (procedure-parameters proc)
           args
           (procedure-environment proc))))
        (else(error "Unknown procedure type -- EXECUTE-APPLICATION" proc))))
(define (operator co-exp)(car co-exp))
(define (operands co-exp)(cdr co-exp))
(define (list-of-values operands env)
  (map (lambda (x)
         (lookup-variable-value x env))
       operands))

;-----let的相关函数
(define (let-var-and-exp exp)
  (cadr exp))
(define (let-body exp)
  (cddr exp))
(define (let-vars exp)
  (map car (let-var-and-exp exp)))
(define (let-exps exp)
  (map cadr (let-var-and-exp exp)))
(define (let->lambda exp)
  (make-lambda (let-vars exp)
               (let-body exp)))
(define (let->application exp)
  (let((exps (let-exps exp)))
    (cons (let->lambda exp)
          exps)))


(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (compound-procedure? proc)
  (tagged-list? proc 'procedure))
(define(procedure-parameters p)(cadr p))
(define (procedure-body p)(caddr p))
(define (procedure-environment p)(cadddr p))

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cadr cadr)
        (list 'cons cons)
        (list 'list list)
        (list 'append append)
        (list 'null? null?)
        (list 'not not)
        (list 'length length)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list '> >)
        (list '= =)
        (list '< <)
        (list 'eq? eq?)
        (list 'equal? equal?)
        (list 'number? number?)
        (list 'symbol? symbol?)
        (list 'pair? pair?)
        (list 'remainder remainder)))
(define (primitive-procedure-names)
  (map car primitive-procedures))
(define (primitive-implementation proc)(cadr proc))
(define (primitive-procedure-objects)
  (map (lambda (proc)(list 'primitive (cadr proc)))
       primitive-procedures))


;--------------初始化环境
(define (setup-environment)
  (let((initial-env
        (extend-environment (primitive-procedure-names)
                            (primitive-procedure-objects)
                            the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
(define glb-env (setup-environment))
;(display glb-env)



;用求值器处理键盘输入的scheme程序
(define input-prompt ";;;M_Eval input:")
(define output-prompt ";;;M_Eval output")


(define (driver-loop)
  ;(prompt-for-input input-prompt)
  (let((input (read)))
    (if(eq? input eof)
       (void)
       
    (let((output (eval input glb-env)))
      (if(definition? input)
         (driver-loop)
         (begin
           (display output)
           (newline)
           (driver-loop)))))))
    ;  (announce-output output-prompt)
   ;   (user-print output)
   ;   (user-print2 output)
   ;   (newline)
   ;   (driver-loop)))))
(define (prompt-for-input string)
  (newline) (newline)(display string) (newline))
(define (announce-output string)
  (newline) (display string)(newline))
(define (user-print2 object)
  (if (eq? object (eval  '(define x 1) glb-env))
      (void)
      (begin(display object)(newline))))
(define (user-print object)
  (if(compound-procedure? object)
     (display (list 'compound-procedure
                    (procedure-parameters object)
                    (procedure-body object)
                    '<procedure-env>))
     (display object)))
(driver-loop)


;测试部分
;测试and
;(cond((and (> 5 3)(> 6 2))(* 3 4))(else 0))
