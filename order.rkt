#lang racket
(require scheme/mpair)

(define (myinput headp)
  (define n (read))
  (define new (mcons n "end"))
  (if(equal? n eof)
      (void)
      (begin(check headp new)
   (myinput headp)(void)))
   )
(define (check head now)
  (define tmp 0)
  (cond ((> (mcar now)(mcar head))
         (if (equal? (mcdr head) "end")
              (begin(set-mcdr! head now)
               void)
              (begin(set! head (mcdr head))
               (check head now))
              ))
        ((= (mcar now)(mcar head))void)
        (else (begin(set-mcdr! now (mcdr head))
               (set-mcdr! head now)
               (set! tmp (mcar now))
               (set-mcar! now (mcar head))
               (set-mcar! head tmp)))))
;(define (myprint headp)
 ; (begin(display (mcar headp))
  ; (display " ")
   ;(if (equal? (mcdr headp) "end")
    ;   void
     ;  (begin(set! headp (mcdr headp))
      ;  (myprint headp)))))
(define (printloop headp)
  (if (equal? (mcdr headp) "end")
            (void)
            (begin(set! headp (mcdr headp))
                  (display " ")
                  (display (mcar headp))
                  (printloop headp)
                  )))
(define (myprint headp)
  (begin(display (mcar headp))
        (if (equal? (mcdr headp) "end")
            (void)
        (printloop headp))))
(define head (mcons (read) "end"))
(myinput head)
(myprint head)
